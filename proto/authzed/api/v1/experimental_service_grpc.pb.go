// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: authzed/api/v1/experimental_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExperimentalServiceClient is the client API for ExperimentalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExperimentalServiceClient interface {
	// BulkLoadRelationships is a faster path to writing a large number of
	// relationships at once. It is both batched and streaming. For maximum
	// performance, the caller should attempt to write relationships in as close
	// to relationship sort order as possible: (resource.object_type,
	// resource.object_id, relation, subject.object.object_type,
	// subject.object.object_id, subject.optional_relation)
	//
	// EXPERIMENTAL
	// https://github.com/authzed/spicedb/issues/1303
	BulkLoadRelationships(ctx context.Context, opts ...grpc.CallOption) (ExperimentalService_BulkLoadRelationshipsClient, error)
}

type experimentalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExperimentalServiceClient(cc grpc.ClientConnInterface) ExperimentalServiceClient {
	return &experimentalServiceClient{cc}
}

func (c *experimentalServiceClient) BulkLoadRelationships(ctx context.Context, opts ...grpc.CallOption) (ExperimentalService_BulkLoadRelationshipsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExperimentalService_ServiceDesc.Streams[0], "/authzed.api.v1.ExperimentalService/BulkLoadRelationships", opts...)
	if err != nil {
		return nil, err
	}
	x := &experimentalServiceBulkLoadRelationshipsClient{stream}
	return x, nil
}

type ExperimentalService_BulkLoadRelationshipsClient interface {
	Send(*BulkLoadRelationshipsRequest) error
	CloseAndRecv() (*BulkLoadRelationshipsResponse, error)
	grpc.ClientStream
}

type experimentalServiceBulkLoadRelationshipsClient struct {
	grpc.ClientStream
}

func (x *experimentalServiceBulkLoadRelationshipsClient) Send(m *BulkLoadRelationshipsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *experimentalServiceBulkLoadRelationshipsClient) CloseAndRecv() (*BulkLoadRelationshipsResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BulkLoadRelationshipsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExperimentalServiceServer is the server API for ExperimentalService service.
// All implementations must embed UnimplementedExperimentalServiceServer
// for forward compatibility
type ExperimentalServiceServer interface {
	// BulkLoadRelationships is a faster path to writing a large number of
	// relationships at once. It is both batched and streaming. For maximum
	// performance, the caller should attempt to write relationships in as close
	// to relationship sort order as possible: (resource.object_type,
	// resource.object_id, relation, subject.object.object_type,
	// subject.object.object_id, subject.optional_relation)
	//
	// EXPERIMENTAL
	// https://github.com/authzed/spicedb/issues/1303
	BulkLoadRelationships(ExperimentalService_BulkLoadRelationshipsServer) error
	mustEmbedUnimplementedExperimentalServiceServer()
}

// UnimplementedExperimentalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExperimentalServiceServer struct {
}

func (UnimplementedExperimentalServiceServer) BulkLoadRelationships(ExperimentalService_BulkLoadRelationshipsServer) error {
	return status.Errorf(codes.Unimplemented, "method BulkLoadRelationships not implemented")
}
func (UnimplementedExperimentalServiceServer) mustEmbedUnimplementedExperimentalServiceServer() {}

// UnsafeExperimentalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExperimentalServiceServer will
// result in compilation errors.
type UnsafeExperimentalServiceServer interface {
	mustEmbedUnimplementedExperimentalServiceServer()
}

func RegisterExperimentalServiceServer(s grpc.ServiceRegistrar, srv ExperimentalServiceServer) {
	s.RegisterService(&ExperimentalService_ServiceDesc, srv)
}

func _ExperimentalService_BulkLoadRelationships_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExperimentalServiceServer).BulkLoadRelationships(&experimentalServiceBulkLoadRelationshipsServer{stream})
}

type ExperimentalService_BulkLoadRelationshipsServer interface {
	SendAndClose(*BulkLoadRelationshipsResponse) error
	Recv() (*BulkLoadRelationshipsRequest, error)
	grpc.ServerStream
}

type experimentalServiceBulkLoadRelationshipsServer struct {
	grpc.ServerStream
}

func (x *experimentalServiceBulkLoadRelationshipsServer) SendAndClose(m *BulkLoadRelationshipsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *experimentalServiceBulkLoadRelationshipsServer) Recv() (*BulkLoadRelationshipsRequest, error) {
	m := new(BulkLoadRelationshipsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExperimentalService_ServiceDesc is the grpc.ServiceDesc for ExperimentalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExperimentalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authzed.api.v1.ExperimentalService",
	HandlerType: (*ExperimentalServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BulkLoadRelationships",
			Handler:       _ExperimentalService_BulkLoadRelationships_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "authzed/api/v1/experimental_service.proto",
}
